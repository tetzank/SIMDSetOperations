#include <cstdio>
#include <chrono>

#include "projectconfig.h"
#include "constants.h"

#include "shuffle_dictionary.hpp"

#include "difference/naive.hpp"
#include "difference/stl.hpp"
#ifdef __SSE2__
#  include "difference/sse.hpp"
#endif
#ifdef __AVX2__
#  include "difference/avx2.hpp"
#endif
#if defined(__AVX512F__) && defined(__AVX512CD__) && defined(__AVX512DQ__)
#  include "difference/avx512.hpp"
#endif



void run(uint32_t **lists,
	size_t (*func)(const uint32_t*,size_t,const uint32_t*,size_t,uint32_t*)=nullptr
){
	if(func){
		auto t_start = std::chrono::high_resolution_clock::now();
		size_t elements=0;
		for(size_t repeat=0; repeat<repeatCount; ++repeat){
			for(size_t i=0; i<listCount; ++i){
				uint32_t *new_list =  (uint32_t*)aligned_alloc(64, arraySize*sizeof(uint32_t));
				for(size_t j=i+1; j<listCount; ++j){
					elements += func(
						lists[i], arraySize,
						lists[j], arraySize,
						new_list
					);
				}
				free(new_list);
			}
		}
		auto t_end = std::chrono::high_resolution_clock::now();
		printf("Wall clock time passed: %10.2f ms - %lu\n",
			std::chrono::duration<double, std::milli>(t_end-t_start).count(),
			elements
		);
	}
}

int main(void){
	auto t_start = std::chrono::high_resolution_clock::now();
	// load lists from file which was generated by genLists
	FILE *fd = fopen("test.dat", "rb");
	if(!fd){
		puts("couldn't open test.dat");
		return -1;
	}
	uint32_t **lists = new uint32_t*[listCount];
	for(size_t i=0; i<listCount; ++i){
		lists[i] = (uint32_t*)aligned_alloc(64, arraySize*sizeof(uint32_t));
		fread(lists[i], 4, arraySize, fd);
	}
	fclose(fd);
	auto t_end = std::chrono::high_resolution_clock::now(); 
	printf("preparing lists done - %f ms\n",
		std::chrono::duration<double, std::milli>(t_end-t_start).count()
	);

	puts("scalar:");
	run(lists, difference_scalar);
	puts("stl set_difference:");
	run(lists, difference_scalar_stl);
#if __GNUC__ >= 5
	//puts("stl parallel set_difference: uses more than one core, just for reference here");
	//run(lists, difference_scalar_stl_parallel);
#endif

#ifdef __SSE2__
	puts("128bit SSE vector:");
	run(lists, difference_vector_sse);
#endif

#ifdef __AVX2__
	puts("256bit AVX2 vector");
	run(lists, difference_vector_avx2);
#endif

#if defined(__AVX512F__) && defined(__AVX512CD__) && defined(__AVX512DQ__)
	//FIXME: broken
	puts("512bit AVX512 vector");
	run(lists, difference_vector_avx512_conflict);
	puts("512bit AVX512 vector - asm");
	run(lists, difference_vector_avx512_conflict_asm);
#endif

	for(size_t i=0; i<listCount; ++i){
		free(lists[i]);
	}
	delete[] lists;

	return 0;
}
